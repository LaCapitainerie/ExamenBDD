datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Commande Commande[]
}

model Account {
  username          String  @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ------------------------------------------------------ //

model Produit {
  id String @id @default(cuid())

  name         String
  reference    String
  type         String
  basePrice        Float
  quantity     Int
  description  String
  categories   Categories[]
  fournisseurs Fournisseur[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AvionAchete LigneCommande[]
}

model Categories {
  id String @id @default(cuid())

  name        String @unique
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Avion Produit[]
}

model Fournisseur {
  id String @id @default(cuid())

  name        String @unique
  email       String @unique
  phone       String @default("")
  address     String @default("")
  city        String @default("")
  country     String @default("")
  postalCode  String @default("")
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Avion Produit[]
}

// ------------------------------------------------------ //

model LigneCommande {
  id        String   @id @default(cuid()) @unique
  
  avion     Produit    @relation(fields: [avionId], references: [id])
  avionId   String
  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Commande Commande[]
}

model Commande {
  id        String   @id @default(cuid()) @unique

  reference String
  date      DateTime @default(now())
  status    Status @default(EN_ATTENTE)

  // user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  avions    LigneCommande[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  EN_ATTENTE
  EN_COURS
  LIVREE
  ANNULEE
}